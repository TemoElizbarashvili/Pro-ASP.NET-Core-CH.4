@page
@model EditorModel
@{
    Layout = "_Layout";
}

<h5 class="bg-primary text-white text-center p-2">Edit Role: @Model.Role.Name</h5>
<form method="post">
<input type="hidden" name="rolename" value="@Model.Role.Name" />
<div asp-validation-summary="All" class="text-danger"></div>
<h5 class="bg-secondary text-white p-2">Members</h5>
<table class="table table-sm table-striped table-bordered">
    <thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
    <tbody>
    @if (!(await Model.Members()).Any()) {
        <tr><td colspan="3" class="text-center">No members</td></tr>
    }
    @foreach (var user in await Model.Members()) {
        <tr>
            <td>@user.UserName</td>
            <td>@user.Email</td>
            <td>
                <button asp-route-userid="@user.Id"
                        class="btn btn-primary btn-sm" type="submit">
                    Change
                </button>
            </td>
        </tr>
    }
    </tbody>
</table>
<h5 class="bg-secondary text-white p-2">Non-Members</h5>
<table class="table table-sm table-striped table-bordered">
<thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
<tbody>
@if (!(await Model.NonMembers()).Any()) {
    <tr><td colspan="3" class="text-center">No non-members</td></tr>
}
@foreach (var user in await Model.NonMembers()) {
    <tr>
    <td>@user.UserName</td>
    <td>@user.Email</td>
    <td>
    <button asp-route-userid="@user.Id"
            class="btn btn-primary btn-sm" type="submit">
        Change
        </button>
    </td>
    </tr>
}
</tbody>
</table>
</form>
<a class="btn btn-secondary" asp-page="list">Back</a>

@functions
{
    public class EditorModel : AdminPageModel
    {
        public UserManager<IdentityUser> UserManager;
        public RoleManager<IdentityRole> RoleManager;

        public EditorModel(UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager)
        {
            UserManager = userManager;
            RoleManager = roleManager;
        }

        public IdentityRole Role { get; set; } = new();

        public Task<IList<IdentityUser>> Members() => UserManager.GetUsersInRoleAsync(Role.Name);

        public async Task<IEnumerable<IdentityUser>> NonMembers() => UserManager.Users.ToList().Except(await Members()); 

        public async Task OnGetAsync(string id)
        {
            Role = await RoleManager.FindByIdAsync(id);
        }

        public async Task<IActionResult> OnPostAsync(string userId, string roleName)
        {
            Role = await RoleManager.FindByNameAsync(roleName);
            var user = await UserManager.FindByIdAsync(userId);
            IdentityResult result;
            if (await UserManager.IsInRoleAsync(user, roleName))
            {
                result = await UserManager.RemoveFromRoleAsync(user, roleName);
            }
            else
            {
                result = await UserManager.AddToRoleAsync(user, roleName);
            }
            if (result.Succeeded)
            {
                return RedirectToPage("list");
            }
            else
            {
                foreach (var err in result.Errors)
                {
                    ModelState.AddModelError("" , err.Description);
                }
            }
            return Page();
        }
        
    }
}

